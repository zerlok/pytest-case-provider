[tool.poetry]
name = "pytest-case-provider"
version = "0.1.2"
description = "Advanced pytest parametrization plugin that generates test case instances from sync or async factories."
authors = ["zerlok <danil.troshnev@gmail.com>"]
readme = "README.md"
license = "MIT"
keywords = [
    "pytest",
    "parametrize",
    "test",
    "case",
    "testcase",
    "decorator",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Pytest",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Libraries",
    "Typing :: Typed",
]

[tool.poetry.urls]
Homepage = "https://github.com/zerlok/pytest-case-provider"
Issues = "https://github.com/zerlok/pytest-case-provider/issues"

[tool.poetry.plugins."pytest11"]
case_provider = "pytest_case_provider.plugin"

[tool.poetry.dependencies]
python = "^3.12"
pytest = "^8"

[tool.poetry.group.dev.dependencies]
mypy = "^1.18.2"
ruff = "^0.14.1"
pytest-cov = "^7.0.0"
pytest-asyncio = "^1.2.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
target-version = "py312"
include = ["src/**/*.py", "tests/**/*.py"]
force-exclude = true
line-length = 120
output-format = "pylint"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "ANN", # because we use mypy
    "D", # TODO: add docstrings to public code
    "FA", # TODO: consider should we use __annotations__
    "TD", # no task tracking
    "FIX", # TODO: consider enable it against new code on pull requests
    "COM812", # because ruff format suggests to skip it
    "ISC001", # because ruff format suggests to skip it
    "RET503", # because we use mypy & ruff doesn't understand `assert_never`
    "RET505", # clashes with mypy exhaustiveness check
    "S101", # allow asserts for tests checks and mypy help
    # TODO: stop ignore this rule
    "A005", # waiting for fix: https://github.com/astral-sh/ruff/issues/15399#event-16176023176
    # TODO: stop ignore this rule
    "UP007", # because of 3.9 support
    # TODO: stop ignore this rule
    "SIM117", # because AST builder uses with statement to build contextual scope statemetns
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "PLR0913", # test functions can use a lots of arguments and fixtures
    "ARG002", # test functions can use fixtures with side effects
]


[tool.mypy]
files = ["src", "tests"]
strict = true
disallow_any_unimported = true
#disallow_any_expr = true
#disallow_any_explicit = true
disallow_any_decorated = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
strict_optional = true
enable_error_code = [
    "redundant-self",
    "redundant-expr",
    "possibly-undefined",
    "truthy-bool",
    "truthy-iterable",
    "ignore-without-code",
    "unused-awaitable",
    "explicit-override",
    "mutable-override",
    "unimported-reveal",
    "narrowed-type-not-subtype",
]

# NOTE: allow return `typing.Any` in test fixtures (e.g. mock objects created with `create_autospec`)
[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_any_expr = false
disallow_any_explicit = false
warn_return_any = false


[tool.pytest.ini_options]
pythonpath = [
    "src",
]
addopts = [
    "--cov=src",
    "--cov-report=term-missing",
]
testpaths = [
    "tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
patch = ["subprocess"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@abc.abstractmethod",
    "if __name__ == .__main__.:",
    "if t.TYPE_CHECKING:",
    "@t.overload",
]
show_missing = true
